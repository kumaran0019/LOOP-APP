import Foundation
import SwiftUI

// MARK: - Core Data Models

struct MemoryInsight: Identifiable, Codable {
    let id = UUID()
    let content: String
    let date: Date
    let emotion: EmotionType
    let confidence: Double
    let aiGenerated: Bool
    
    init(content: String, date: Date, emotion: EmotionType, confidence: Double = 0.85, aiGenerated: Bool = true) {
        self.content = content
        self.date = date
        self.emotion = emotion
        self.confidence = confidence
        self.aiGenerated = aiGenerated
    }
}

struct RelationshipMetrics: Codable {
    let connectionStrength: Double
    let lastInteractionDays: Int
    let totalMemories: Int
    let dominantEmotion: EmotionType
    let reconnectionUrgency: ReconnectionUrgency
    
    enum ReconnectionUrgency: String, Codable, CaseIterable {
        case low = "Low"
        case medium = "Medium"
        case high = "High"
        case urgent = "Urgent"
        
        var color: Color {
            switch self {
            case .low: return .green
            case .medium: return .yellow
            case .high: return .orange
            case .urgent: return .red
            }
        }
    }
}

// MARK: - Extended Person Model

extension Person {
    var relationshipMetrics: RelationshipMetrics {
        // Mock relationship analysis
        // In a real app, this would be calculated by Apple Intelligence
        let daysSinceLastInteraction = Int.random(in: 1...30)
        let urgency: RelationshipMetrics.ReconnectionUrgency
        
        switch daysSinceLastInteraction {
        case 1...7: urgency = .low
        case 8...14: urgency = .medium
        case 15...21: urgency = .high
        default: urgency = .urgent
        }
        
        return RelationshipMetrics(
            connectionStrength: Double.random(in: 0.7...1.0),
            lastInteractionDays: daysSinceLastInteraction,
            totalMemories: Int.random(in: 15...50),
            dominantEmotion: emotion,
            reconnectionUrgency: urgency
        )
    }
    
    var memoryInsights: [MemoryInsight] {
        // Mock memory insights generated by Apple Intelligence
        return [
            MemoryInsight(
                content: summary,
                date: Date().addingTimeInterval(-TimeInterval.random(in: 86400...2592000)),
                emotion: emotion
            ),
            MemoryInsight(
                content: "You both shared laughter during a spontaneous moment that strengthened your bond.",
                date: Date().addingTimeInterval(-TimeInterval.random(in: 86400...2592000)),
                emotion: .joy
            ),
            MemoryInsight(
                content: "A quiet moment of understanding that didn't need words to be meaningful.",
                date: Date().addingTimeInterval(-TimeInterval.random(in: 86400...2592000)),
                emotion: .comfort
            )
        ]
    }
}

// MARK: - Journal API Integration Models

struct JournalEntry: Identifiable, Codable {
    let id = UUID()
    let title: String
    let content: String
    let date: Date
    let mood: String
    let people: [String]
    let location: String?
    let photos: [String]
    let aiInsights: [String]
    
    // Privacy-preserving properties
    let isPrivate: Bool
    let shareWithAppleIntelligence: Bool
    let allowEmotionAnalysis: Bool
}

struct JournalAPIResponse: Codable {
    let entries: [JournalEntry]
    let totalCount: Int
    let hasMore: Bool
    let privacyStatus: PrivacyStatus
    
    struct PrivacyStatus: Codable {
        let userConsent: Bool
        let dataProcessingLocation: String
        let retentionPeriod: String
    }
}

// MARK: - Apple Intelligence Models

struct AIMemoryAnalysis: Codable {
    let personName: String
    let analysisDate: Date
    let emotionalContext: EmotionType
    let relationshipStrength: Double
    let keyThemes: [String]
    let suggestedActions: [String]
    let confidenceScore: Double
    let processingLocation: String // "on-device" for privacy
}

struct AIReconnectionSuggestion: Identifiable, Codable {
    let id = UUID()
    let personName: String
    let suggestionType: SuggestionType
    let content: String
    let reasoning: String
    let urgency: RelationshipMetrics.ReconnectionUrgency
    let estimatedImpact: Double
    
    enum SuggestionType: String, Codable, CaseIterable {
        case call = "Phone Call"
        case message = "Text Message"
        case video = "Video Call"
        case inPerson = "Meet in Person"
        case gift = "Send a Gift"
        case memory = "Share a Memory"
        
        var icon: String {
            switch self {
            case .call: return "phone.fill"
            case .message: return "message.fill"
            case .video: return "video.fill"
            case .inPerson: return "person.2.fill"
            case .gift: return "gift.fill"
            case .memory: return "photo.fill"
            }
        }
    }
}